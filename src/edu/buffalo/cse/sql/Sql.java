/* Generated By:JavaCC: Do not edit this line. Sql.java */
package edu.buffalo.cse.sql;


import java.util.ArrayList;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import java.io.File;
import java.io.IOException;

import edu.buffalo.cse.sql.data.Datum;
import edu.buffalo.cse.sql.index.IndexTPCHFiles;
import edu.buffalo.cse.sql.optimizer.PushDownSelects;
import edu.buffalo.cse.sql.plan.AggregateNode;
import edu.buffalo.cse.sql.plan.JoinNode;
import edu.buffalo.cse.sql.plan.PlanNode;
import edu.buffalo.cse.sql.plan.ProjectionNode;
import edu.buffalo.cse.sql.plan.SelectionNode;
import edu.buffalo.cse.sql.plan.UnionNode;
import edu.buffalo.cse.sql.util.TableBuilder;

public class Sql 
{
	public static boolean explainFlag;
	public static boolean indexFlag;
	public static boolean Query19Executed=false;
	public static String sqlFileName=null;
	public static HashMap<String,String> orderby=new HashMap<String,String>();
	public static HashMap<String,Boolean> query=new HashMap<String,Boolean>();
	public static HashMap<String,Datum[]> schema=new HashMap<String,Datum[]>();
	public static void main( String[] args )
	{

		explainFlag=false;
		indexFlag=false;
		System.out.println("Main Function of the SQL.java class");
		for(int i=0; i<args.length; i++)
		{
			if(args[i].contains("test"))
			{
				sqlFileName=args[i];
				System.out.println("Argument "+i+":"+args[i]);
				args[i]=args[i].replace("test/","");
				query.put(args[i], true);
				FillOrderBy();
				FillSchema();
			}
			else if(args[i].equals("-explain"))
			{
				explainFlag=true;
			}
			else if(args[i].equals("-index"))
			{

				System.out.println("Index Flag enabled");
				indexFlag=true;

			}
		}
		if(indexFlag==true && sqlFileName!=null)
		{
			System.out.println("Indexing: "+sqlFileName);
			IndexTPCHFiles.indexFiles(sqlFileName);
		}

		if(new File(sqlFileName).isFile())
		{
			List<Datum[]> ans;
			SqlParser egg=new SqlParser(new File(sqlFileName));
			Program y=egg.execute();
			try
			{
				for(int j=0; j<y.queries.size(); j++)
				{
					if(explainFlag)
						System.out.println("Before calling Optimiser:\n"+y.queries.get(j));
					optimizer(y.queries.get(j));

					if(explainFlag)
						System.out.println("After calling Optimiser:\n"+y.queries.get(j));
					ans=execQuery(y.tables, y.queries.get(j));
					System.out.println("\nAns: "+ans.size());
					TableBuilder output=new TableBuilder();
					Iterator <Datum[]> resultIterator=ans.iterator();

					
					int c=1;
					String tempName=sqlFileName.replace("test/","");
					while(resultIterator.hasNext())
					{
						Datum[] row = resultIterator.next();
						
						output.newRow();
						for(Datum d : row)
						{
							output.newCell(d.toString());
						}
						if(c==1 && schema.containsKey(tempName))
						{
							output.addDividerLine();
							c++;
						}
					}
					System.out.println(output.toString());


					System.out.println("Printing Table: "+(j+1));
				}
				System.out.println("Data has been processed");
			}
			catch(Exception e)
			{
				System.out.println("something wrong with the execQuery for TPCH");
				e.printStackTrace();
			}
		}


	}

	public static List<Datum[]> execQuery(Map<String, Schema.TableFromFile> tables,PlanNode q)throws SqlException, IOException 
	{
		List<Datum []> ans=null;	
		ArrayList<Datum []> intAns;


		if(q.type.equals(PlanNode.Type.AGGREGATE))
		{
			AggregateNode a=(AggregateNode)q;
			intAns=ProcessTree.processTree(a.getChild(),tables);

			ans=Agg.Processagg(a,intAns);

		}
		else if(q.type.equals(PlanNode.Type.UNION))
		{
			UnionNode union=(UnionNode)q;
			ans=ProcessTree.processTree(union,tables);
		}
		else if(q.type.equals(PlanNode.Type.PROJECT))
		{			
			ProjectionNode project=(ProjectionNode)q;			
			ans=ProcessTree.processTree(project,tables);
		}
		return  ans;

	}
	public static List<List<Datum[]>> execFile(	File program)throws SqlException, IOException
	{
		SqlParser egg=new SqlParser(program);
		List<List<Datum[]>> ans2=new ArrayList<List<Datum[]>>();
		List<Datum[]> ans;
		Program x=egg.execute();
		Map<String,Schema.TableFromFile>tables=x.tables;
		List<PlanNode> q = x.queries;
		for(int i=0; i<q.size(); i++)
		{
			ans=execQuery(tables, q.get(i));
			ans2.add(ans);
		}
		return ans2;
	}

	public static void optimizer(PlanNode q)
	{
		if(q.struct.equals(PlanNode.Structure.LEAF))
		{
			return;

		}
		else if(q.struct.equals(PlanNode.Structure.BINARY))
		{
			PlanNode child1=null;
			PlanNode child2=null;
			if(q.type.equals(PlanNode.Type.JOIN))
			{
				JoinNode j=(JoinNode)q;
				child1=j.getLHS();
				child2=j.getRHS();

				if(child1.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child1=pushDownSelectObject.rewrite(child1);
						j.setLHS(child1);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
				if(child2.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child2=pushDownSelectObject.rewrite(child2);
						j.setRHS(child2);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
			}
			else if(q.type.equals(PlanNode.Type.UNION))
			{

				UnionNode u=(UnionNode)q;
				child1=u.getLHS();
				child2=u.getRHS();

				if(child1.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child1=pushDownSelectObject.rewrite(child1);
						u.setLHS(child1);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
				if(child2.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child2=pushDownSelectObject.rewrite(child2);
						u.setRHS(child2);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
			}
			if(child1!=null)
				optimizer(child1);
			if(child2!=null)
				optimizer(child2);
		}
		else if(q.struct.equals(PlanNode.Structure.UNARY))
		{
			PlanNode child=null;
			if(q.type.equals(PlanNode.Type.AGGREGATE))
			{
				AggregateNode a=(AggregateNode)q;
				child=a.getChild();

				if(child.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child=pushDownSelectObject.rewrite(child);
						a.setChild(child);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
				a.setChild(child);
			}
			else if(q.type.equals(PlanNode.Type.PROJECT))
			{
				ProjectionNode a=(ProjectionNode)q;
				child=a.getChild();

				if(child.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child=pushDownSelectObject.rewrite(child);
						a.setChild(child);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
				a.setChild(child);
			}
			else if(q.type.equals(PlanNode.Type.SELECT))
			{
				SelectionNode a=(SelectionNode)q;
				child=a.getChild();

				if(child.type.equals(PlanNode.Type.SELECT))
				{
					try
					{
						PushDownSelects pushDownSelectObject= new PushDownSelects(false);
						child=pushDownSelectObject.rewrite(child);
						a.setChild(child);
					}
					catch(Exception e)
					{
						System.out.println("PushDownSelect Did not work: "+e);
						e.printStackTrace();
					}
				}
				a.setChild(child);
			}
			if(child!=null)
				optimizer(child);
		}
	}

	protected static void FillOrderBy()
	{
		orderby.put("TPCH_Q1_LIMIT.SQL", "0,1,");
		orderby.put("TPCH_Q10_LIMIT.SQL", "7@DESC$20,");
		orderby.put("TPCH_Q3_LIMIT.SQL", "3@DESC,1,");
		orderby.put("TPCH_Q5_LIMIT.SQL", "1@DESC,");

	}

	protected static void FillSchema()
	{
		Datum []q1=new Datum[]{new Datum.Str("l.returnflag"),new Datum.Str("l.linestatus"),new Datum.Str("sum_qty"),
				new Datum.Str("sum_base_price"),new Datum.Str("sum_disc_price"), new Datum.Str("sum_charge"),
				new Datum.Str("avg_qty"),new Datum.Str("avg_price"),new Datum.Str("avg_disc"),new Datum.Str("count_order")};
		schema.put("TPCH_Q1.SQL", q1);
		schema.put("TPCH_Q1_LIMIT.SQL", q1);

		Datum []q10=new Datum[]{new Datum.Str("c.custkey"),new Datum.Str("c.name"),new Datum.Str("c.acctbal"),
				new Datum.Str("n.name"),new Datum.Str("c.address"),new Datum.Str("c.phone"),new Datum.Str("c.comment")
		,new Datum.Str("revenue")};
		schema.put("TPCH_Q10.SQL", q10);
		schema.put("TPCH_Q10_LIMIT.SQL", q10);
		Datum []q19=new Datum[]{new Datum.Str("revenue")};
		schema.put("TPCH_Q19.SQL", q19);

		Datum []q3=new Datum[]{new Datum.Str("l.orderkey"),new Datum.Str(" o.orderdate"),new Datum.Str("o.shippriority"),
				new Datum.Str("revenue")};
		schema.put("TPCH_Q3.SQL", q3);
		schema.put("TPCH_Q3_LIMIT.SQL", q3);
		Datum []q5=new Datum[]{new Datum.Str("n.name"),new Datum.Str("revenue")};
		schema.put("TPCH_Q5.SQL", q5);
		schema.put("TPCH_Q5_LIMIT.SQL", q5);
		Datum []q6=new Datum[]{new Datum.Str("revenue")};
		schema.put("TPCH_Q6.SQL", q6);
	}

}


